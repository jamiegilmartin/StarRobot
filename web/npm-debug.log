0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'serialport' ]
2 info using npm@1.1.61
3 info using node@v0.8.9
4 verbose read json /Users/jamiegilmartin/package.json
5 verbose read json /Users/jamiegilmartin/node_modules/plovr/package.json
6 verbose read json /Users/jamiegilmartin/package.json
7 verbose cache add [ 'serialport', null ]
8 silly cache add name=undefined spec="serialport" args=["serialport",null]
9 verbose parsed url { pathname: 'serialport',
9 verbose parsed url   path: 'serialport',
9 verbose parsed url   href: 'serialport' }
10 silly lockFile de62b558-serialport serialport
11 verbose lock serialport /Users/jamiegilmartin/.npm/de62b558-serialport.lock
12 silly lockFile de62b558-serialport serialport
13 verbose addNamed [ 'serialport', '' ]
14 verbose addNamed [ null, '' ]
15 silly lockFile 54883da9-serialport serialport@
16 verbose lock serialport@ /Users/jamiegilmartin/.npm/54883da9-serialport.lock
17 silly addNameRange { name: 'serialport', range: '', hasData: false }
18 verbose url raw serialport
19 verbose url resolving [ 'https://registry.npmjs.org/', './serialport' ]
20 verbose url resolved https://registry.npmjs.org/serialport
21 info trying registry request attempt 1 at 22:27:04
22 verbose etag "4VVA3ZB5FWRNNHZC40G27DTC4"
23 http GET https://registry.npmjs.org/serialport
24 http 304 https://registry.npmjs.org/serialport
25 silly registry.get cb [ 304,
25 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
25 silly registry.get     etag: '"4VVA3ZB5FWRNNHZC40G27DTC4"',
25 silly registry.get     date: 'Sun, 19 May 2013 02:27:05 GMT',
25 silly registry.get     'content-length': '0' } ]
26 verbose etag serialport from cache
27 silly addNameRange number 2 { name: 'serialport', range: '', hasData: true }
28 silly addNameRange versions [ 'serialport',
28 silly addNameRange   [ '0.1.0',
28 silly addNameRange     '0.1.1',
28 silly addNameRange     '0.1.3',
28 silly addNameRange     '0.2.0',
28 silly addNameRange     '0.2.2',
28 silly addNameRange     '0.2.3',
28 silly addNameRange     '0.2.4',
28 silly addNameRange     '0.2.5',
28 silly addNameRange     '0.2.6',
28 silly addNameRange     '0.2.7',
28 silly addNameRange     '0.2.8',
28 silly addNameRange     '0.2.9',
28 silly addNameRange     '0.3.0',
28 silly addNameRange     '0.6.0',
28 silly addNameRange     '0.6.1',
28 silly addNameRange     '0.6.2',
28 silly addNameRange     '0.6.3',
28 silly addNameRange     '0.6.5',
28 silly addNameRange     '0.6.6',
28 silly addNameRange     '0.6.7',
28 silly addNameRange     '0.7.0',
28 silly addNameRange     '0.7.1',
28 silly addNameRange     '0.7.2',
28 silly addNameRange     '0.7.3',
28 silly addNameRange     '0.7.4',
28 silly addNameRange     '0.7.5',
28 silly addNameRange     '1.0.0',
28 silly addNameRange     '1.0.1',
28 silly addNameRange     '1.0.2',
28 silly addNameRange     '1.0.3',
28 silly addNameRange     '1.0.4',
28 silly addNameRange     '1.0.5',
28 silly addNameRange     '1.0.6',
28 silly addNameRange     '1.0.7',
28 silly addNameRange     '1.0.8',
28 silly addNameRange     '1.1.0' ] ]
29 verbose addNamed [ 'serialport', '1.1.0' ]
30 verbose addNamed [ '1.1.0', '1.1.0' ]
31 silly lockFile 2854b428-serialport-1-1-0 serialport@1.1.0
32 verbose lock serialport@1.1.0 /Users/jamiegilmartin/.npm/2854b428-serialport-1-1-0.lock
33 verbose read json /Users/jamiegilmartin/.npm/serialport/1.1.0/package/package.json
34 silly lockFile 2854b428-serialport-1-1-0 serialport@1.1.0
35 silly lockFile 54883da9-serialport serialport@
36 silly resolved [ { name: 'serialport',
36 silly resolved     version: '1.1.0',
36 silly resolved     description: 'Welcome your robotic javascript overlords. Better yet, program them!',
36 silly resolved     author:
36 silly resolved      { name: 'Chris Williams',
36 silly resolved        email: 'voodootikigod@gmail.com',
36 silly resolved        url: 'http://www.voodootikigod.com' },
36 silly resolved     main: './serialport',
36 silly resolved     repository:
36 silly resolved      { type: 'git',
36 silly resolved        url: 'git://github.com/voodootikigod/node-serialport.git' },
36 silly resolved     maintainers: [ [Object], [Object] ],
36 silly resolved     dependencies:
36 silly resolved      { bindings: '1.1.0',
36 silly resolved        async: '0.1.18',
36 silly resolved        sf: '0.1.6',
36 silly resolved        optimist: '~0.3.4' },
36 silly resolved     devDependencies: { mocha: '*', chai: '*' },
36 silly resolved     engines: { node: '>= 0.7.0' },
36 silly resolved     bin:
36 silly resolved      { serialportlist: './bin/serialportList.js',
36 silly resolved        serialportterm: './bin/serialportTerminal.js' },
36 silly resolved     scripts:
36 silly resolved      { test: 'mocha -R spec -t 60s -s 60s',
36 silly resolved        install: 'node-gyp rebuild' },
36 silly resolved     gypfile: true,
36 silly resolved     contributors:
36 silly resolved      [ [Object],
36 silly resolved        [Object],
36 silly resolved        [Object],
36 silly resolved        [Object],
36 silly resolved        [Object],
36 silly resolved        [Object],
36 silly resolved        [Object],
36 silly resolved        [Object],
36 silly resolved        [Object] ],
36 silly resolved     readme: '<pre>\n  eeeee eeeee eeeee eeee       e  eeeee \n  8   8 8  88 8   8 8          8  8   " \n  8e  8 8   8 8e  8 8eee       8e 8eeee \n  88  8 8   8 88  8 88      e  88    88 \n  88  8 8eee8 88ee8 88ee 88 8ee88 8ee88\n\n  eeeee eeee eeeee  e  eeeee e     eeeee eeeee eeeee eeeee \n  8   " 8    8   8  8  8   8 8     8   8 8  88 8   8   8   \n  8eeee 8eee 8eee8e 8e 8eee8 8e    8eee8 8   8 8eee8e  8e  \n     88 88   88   8 88 88  8 88    88    8   8 88   8  88  \n  8ee88 88ee 88   8 88 88  8 88eee 88    8eee8 88   8  88\n</pre>\n\nVersion: 1.1.0 - Released August 24, 2012 - Now with Windows Support!!!\n\n*****\n\nImagine a world where you can write JavaScript to control blenders, lights, security systems, or even robots. Yes, I said robots. That world is here and now with node-serialport. It provides a very simple interface to the low level serial port code necessary to program [Arduino](http://www.arduino.cc/) chipsets, [X10](http://www.smarthome.com/manuals/protocol.txt) wireless communications, or even the rising [Z-Wave](http://www.z-wave.com/modules/ZwaveStart/) and [Zigbee](http://www.zigbee.org/) standards. The physical world is your oyster with this goodie. For a full break down of why we made this, please read [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics).\n\n*****\n\nRobots, you say?\n================\n\nThis library is admittedly a base level toolkit for building amazing things with real world (including robots). Here are a couple of those amazing things that leverage node-serialport:\n\n* [firmata](https://github.com/jgautier/firmata) Talk natively to Arduino using the firmata protocol.\n* [tmpad](http://tmpvar.com/project/tmpad/) [source](https://github.com/tmpvar/tmpad) - a DIY midi pad using infrared, arduino, and nodejs. [Video](http://vimeo.com/34575470)\n* [duino](https://github.com/ecto/duino) - A higher level framework for working with Arduinos in node.js.\n* [Arduino Drinking Game Extravaganza](http://jsconf.eu/2011/arduino_drinking_game_extravaganza.html) - AKA "The Russian" a hexidecimal drinking game for geeks by Uxebu presented at JSConf EU 2011.\n* [Arduino controlling popcorn.js](https://gist.github.com/968773) - Controlling a popcorn.js video with an Arduino kit.\n* [Robotic JavaScript](http://jsconf.eu/2010/speaker/livingroombindmotion_function.html) - The first live presentation of the node-serialport code set as presented at JSConf EU 2010.\n* [devicestack](https://github.com/adrai/devicestack) - This module helps you to represent a device and its protocol.\n\nFor getting started with node-serialport, we recommend you begin with the following articles:\n\n* [Arduino Node Security Sensor Hacking](http://nexxylove.tumblr.com/post/20159263403/arduino-node-security-sensor-hacking) - A great all around "how do I use this" article.\n* [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics) - A survey article of why one would want to program robots in JS.\n* [Johnny-Five Getting Started Guide](https://github.com/rwldrn/johnny-five#setup-and-assemble-arduino) - Introduction to using the high level Johnny-Five library (awesome).\n\nHow To Use\n==========\n\nUsing node-serialport is pretty easy because it is pretty basic. It provides you with the building block to make great things, it is not a complete solution - just a cog in the (world domination) machine.\n\nTo Install\n----------\n\n<pre>\n  npm install serialport\n</pre>\n\nThis assumes you have everything on your system necessary to compile ANY native module for Node.js. This may not be the case, though, so please ensure the following are true for your system before filing an issue about "Does not install". For all operatings systems, please ensure you have Python 2.x installed AND not 3.0, node-gyp (what we use to compile) requires Python 2.x.\n\n### Windows:\n\nEnsure you have Visual Studio 2010 installed. If you have any version OTHER THAN VS 2010, please read this: https://github.com/TooTallNate/node-gyp/issues/44 \n\n### Mac OS X:\n\nEnsure that you have at a minimum the xCode Command Line Tools installed appropriate for your system configuration. If you recently upgrade OS, it probably removed your installation of Command Line Tools, please verify before submitting a ticket.\n\n### Linux:\n\nYou know what you need for you system, basically your appropriate analog of build-essential. Keep rocking!\n\n\nTo Use\n------\n\nOpening a serial port:\n\n<pre>\n  var SerialPort = require("serialport").SerialPort\n  var serialPort = new SerialPort("/dev/tty-usbserial1", {\n    baudrate: 57600\n  });\n</pre>\n  \nWhen opening a serial port, you can specify (in this order).\n\n1. Path to Serial Port - required.\n1. Options - optional and described below.\n\nThe options object allows you to pass named options to the serial port during initialization. The valid attributes for the options object are the following:\n\n* baudrate: Baud Rate, defaults to 9600. Must be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50.\n* databits: Data Bits, defaults to 8. Must be one of: 8, 7, 6, or 5.\n* stopbits: Stop Bits, defaults to 1. Must be one of: 1 or 2.\n* parity: Parity, defaults to \'none\'. Must be one of: \'none\', \'even\', \'mark\', \'odd\', \'space\'\n* buffersize: Size of read buffer, defaults to 255. Must be an integer value.\n* parser: The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a "data" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\n\n**Note, we have added support for either all lowercase OR camelcase of the options (thanks @jagautier), use whichever style you prefer.**\n\nopen event\n----------\n\nYou MUST wait for the open event to be emitted before reading/writing to the serial port. The open happens asynchronously so installing \'data\' listeners and writing \nbefore the open event might result in... nothing at all.\n\nAssuming you are connected to a serial console, you would for example:\n\n<pre>\nserialPort.on("open", function () {\n  console.log(\'open\');\n  serialPort.on(\'data\', function(data) {\n    console.log(\'data received: \' + data);\n  });  \n  serialPort.write("ls\\n", function(err, results) {\n    console.log(\'err \' + err);\n    console.log(\'results \' + results);\n  });  \n});\n</pre>\n\nYou can also call the open function, in this case instanciate the serialport with an additional flag.\n\n<pre>\nvar SerialPort = require("serialport").SerialPort\nvar serialPort = new SerialPort("/dev/tty-usbserial1", {\n  baudrate: 57600\n}, false); // this is the openImmediately flag [default is true]\n\nserialPort.open(function () {\n  console.log(\'open\');\n  serialPort.on(\'data\', function(data) {\n    console.log(\'data received: \' + data);\n  });  \n  serialPort.write("ls\\n", function(err, results) {\n    console.log(\'err \' + err);\n    console.log(\'results \' + results);\n  });  \n});\n</pre>\n\nList Ports\n----------\n\nYou can also list the ports along with some metadata as well.\n\n<pre>\n  serialport.list(function (err, ports) {\n    ports.forEach(function(port) {\n      console.log(port.comName);\n      console.log(port.pnpId);\n      console.log(port.manufacturer);\n    });\n  });\n</pre>\n\nParsers\n-------\n\nOut of the box, node-serialport provides two parsers one that simply emits the raw buffer as a data event and the other which provides familiar "readline" style parsing. To use the readline parser, you must provide a delimiter as such:\n\n<pre>\n  var serialport = require("serialport");\n  var SerialPort = serialport.SerialPort; // localize object constructor\n  \n  var sp = new SerialPort("/dev/tty-usbserial1", { \n    parser: serialport.parsers.readline("\\n") \n  });\n</pre>\n\nTo use the raw parser, you just provide the function definition (or leave undefined):\n\n<pre>\n  var serialport = require("serialport");\n  var SerialPort = serialport.SerialPort; // localize object constructor\n  \n  var sp = new SerialPort("/dev/tty-usbserial1", { \n    parser: serialport.parsers.raw\n  });\n</pre>\n\n\nYou can get updates of new data from the Serial Port as follows:\n\n<pre>\n  serialPort.on("data", function (data) {\n    sys.puts("here: "+data);\n  });\n</pre>\n\nYou can write to the serial port by sending a string or buffer to the write method as follows:\n\n<pre>\nserialPort.write("OMG IT WORKS\\r");\n</pre>\n\nEnjoy and do cool things with this code.\n\n',
36 silly resolved     _id: 'serialport@1.1.0',
36 silly resolved     _from: 'serialport' } ]
37 info install serialport@1.1.0 into /Users/jamiegilmartin
38 info installOne serialport@1.1.0
39 verbose from cache /Users/jamiegilmartin/.npm/serialport/1.1.0/package/package.json
40 info /Users/jamiegilmartin/node_modules/serialport unbuild
41 verbose read json /Users/jamiegilmartin/node_modules/serialport/package.json
42 verbose tar unpack /Users/jamiegilmartin/.npm/serialport/1.1.0/package.tgz
43 silly lockFile 88bd0996-ilmartin-node-modules-serialport /Users/jamiegilmartin/node_modules/serialport
44 verbose lock /Users/jamiegilmartin/node_modules/serialport /Users/jamiegilmartin/.npm/88bd0996-ilmartin-node-modules-serialport.lock
45 silly gunzTarPerm modes [ '755', '644' ]
46 silly gunzTarPerm extractEntry package.json
47 silly gunzTarPerm extractEntry .npmignore
48 silly gunzTarPerm extractEntry README.md
49 silly gunzTarPerm extractEntry LICENSE
50 silly gunzTarPerm extractEntry serialport.js
51 silly gunzTarPerm extractEntry build/binding.Makefile
52 silly gunzTarPerm extractEntry build/config.gypi
53 silly gunzTarPerm extractEntry build/gyp-mac-tool
54 silly gunzTarPerm extractEntry build/Makefile
55 silly gunzTarPerm extractEntry build/Release/.deps/Release/obj.target/serialport/src/serialport.o.d
56 silly gunzTarPerm extractEntry build/Release/.deps/Release/obj.target/serialport/src/serialport_unix.o.d
57 silly gunzTarPerm extractEntry build/Release/.deps/Release/serialport.node.d
58 silly gunzTarPerm extractEntry build/Release/linker.lock
59 silly gunzTarPerm extractEntry build/Release/obj.target/serialport/src/serialport.o
60 silly gunzTarPerm extractEntry build/Release/obj.target/serialport/src/serialport_unix.o
61 silly gunzTarPerm extractEntry build/serialport.target.mk
62 silly gunzTarPerm extractEntry changelog.md
63 silly gunzTarPerm extractEntry examples/logger.js
64 silly gunzTarPerm extractEntry AUTHORS
65 silly gunzTarPerm extractEntry binding.gyp
66 silly gunzTarPerm extractEntry bin/serialportList.js
67 silly gunzTarPerm extractEntry bin/serialportTerminal.js
68 silly gunzTarPerm extractEntry src/serialport.cpp
69 silly gunzTarPerm extractEntry src/serialport.h
70 silly gunzTarPerm extractEntry src/serialport_unix.cpp
71 silly gunzTarPerm extractEntry src/serialport_win.cpp
72 silly gunzTarPerm extractEntry src/win/disphelper.c
73 silly gunzTarPerm extractEntry src/win/disphelper.h
74 silly gunzTarPerm extractEntry src/win/enumser.cpp
75 silly gunzTarPerm extractEntry src/win/enumser.h
76 silly gunzTarPerm extractEntry src/win/stdafx.h
77 silly gunzTarPerm extractEntry test/echoTest.js
78 silly gunzTarPerm extractEntry test/echo/echo.ino
79 silly gunzTarPerm extractEntry tests/arduino-ldr-read.js
80 silly gunzTarPerm extractEntry tests/echoTest.js
81 silly gunzTarPerm extractEntry tests/test_read.js
82 silly gunzTarPerm extractEntry tests/test_write.js
83 silly gunzTarPerm extractEntry tests/test_zwave.js
84 silly gunzTarPerm extractEntry tests/arduinioEcho/arduinioEcho.ino
85 silly gunzTarPerm extractEntry tests/arduino-ldr-read.pde
86 verbose read json /Users/jamiegilmartin/node_modules/serialport/package.json
87 silly lockFile 88bd0996-ilmartin-node-modules-serialport /Users/jamiegilmartin/node_modules/serialport
88 info preinstall serialport@1.1.0
89 verbose from cache /Users/jamiegilmartin/node_modules/serialport/package.json
90 verbose readDependencies using package.json deps
91 verbose from cache /Users/jamiegilmartin/node_modules/serialport/package.json
92 verbose readDependencies using package.json deps
93 verbose cache add [ 'bindings@1.1.0', null ]
94 silly cache add name=undefined spec="bindings@1.1.0" args=["bindings@1.1.0",null]
95 verbose parsed url { pathname: 'bindings@1.1.0',
95 verbose parsed url   path: 'bindings@1.1.0',
95 verbose parsed url   href: 'bindings@1.1.0' }
96 silly cache add name="bindings" spec="1.1.0" args=["bindings","1.1.0"]
97 verbose parsed url { pathname: '1.1.0', path: '1.1.0', href: '1.1.0' }
98 verbose addNamed [ 'bindings', '1.1.0' ]
99 verbose addNamed [ '1.1.0', '1.1.0' ]
100 silly lockFile ff2d1960-bindings-1-1-0 bindings@1.1.0
101 verbose lock bindings@1.1.0 /Users/jamiegilmartin/.npm/ff2d1960-bindings-1-1-0.lock
102 verbose cache add [ 'async@0.1.18', null ]
103 silly cache add name=undefined spec="async@0.1.18" args=["async@0.1.18",null]
104 verbose parsed url { pathname: 'async@0.1.18',
104 verbose parsed url   path: 'async@0.1.18',
104 verbose parsed url   href: 'async@0.1.18' }
105 silly cache add name="async" spec="0.1.18" args=["async","0.1.18"]
106 verbose parsed url { pathname: '0.1.18', path: '0.1.18', href: '0.1.18' }
107 verbose addNamed [ 'async', '0.1.18' ]
108 verbose addNamed [ '0.1.18', '0.1.18' ]
109 silly lockFile b86dcd49-async-0-1-18 async@0.1.18
110 verbose lock async@0.1.18 /Users/jamiegilmartin/.npm/b86dcd49-async-0-1-18.lock
111 verbose url raw bindings/1.1.0
112 verbose url resolving [ 'https://registry.npmjs.org/', './bindings/1.1.0' ]
113 verbose url resolved https://registry.npmjs.org/bindings/1.1.0
114 info trying registry request attempt 1 at 22:27:04
115 verbose etag "CFVJVT1GCZS3UUVQEXZASBJH7"
116 http GET https://registry.npmjs.org/bindings/1.1.0
117 verbose url raw async/0.1.18
118 verbose url resolving [ 'https://registry.npmjs.org/', './async/0.1.18' ]
119 verbose url resolved https://registry.npmjs.org/async/0.1.18
120 info trying registry request attempt 1 at 22:27:04
121 verbose etag "6AN2S70MS70JAO3RJ0UBHU39X"
122 http GET https://registry.npmjs.org/async/0.1.18
123 verbose cache add [ 'sf@0.1.6', null ]
124 silly cache add name=undefined spec="sf@0.1.6" args=["sf@0.1.6",null]
125 verbose parsed url { pathname: 'sf@0.1.6', path: 'sf@0.1.6', href: 'sf@0.1.6' }
126 silly cache add name="sf" spec="0.1.6" args=["sf","0.1.6"]
127 verbose parsed url { pathname: '0.1.6', path: '0.1.6', href: '0.1.6' }
128 verbose addNamed [ 'sf', '0.1.6' ]
129 verbose addNamed [ '0.1.6', '0.1.6' ]
130 silly lockFile cae65a0c-sf-0-1-6 sf@0.1.6
131 verbose lock sf@0.1.6 /Users/jamiegilmartin/.npm/cae65a0c-sf-0-1-6.lock
132 verbose cache add [ 'optimist@~0.3.4', null ]
133 silly cache add name=undefined spec="optimist@~0.3.4" args=["optimist@~0.3.4",null]
134 verbose parsed url { pathname: 'optimist@~0.3.4',
134 verbose parsed url   path: 'optimist@~0.3.4',
134 verbose parsed url   href: 'optimist@~0.3.4' }
135 silly cache add name="optimist" spec="~0.3.4" args=["optimist","~0.3.4"]
136 verbose parsed url { pathname: '~0.3.4', path: '~0.3.4', href: '~0.3.4' }
137 verbose addNamed [ 'optimist', '~0.3.4' ]
138 verbose addNamed [ null, '>=0.3.4- <0.4.0-' ]
139 silly lockFile 094c60bd-optimist-0-3-4 optimist@~0.3.4
140 verbose lock optimist@~0.3.4 /Users/jamiegilmartin/.npm/094c60bd-optimist-0-3-4.lock
141 silly addNameRange { name: 'optimist', range: '>=0.3.4- <0.4.0-', hasData: false }
142 verbose url raw sf/0.1.6
143 verbose url resolving [ 'https://registry.npmjs.org/', './sf/0.1.6' ]
144 verbose url resolved https://registry.npmjs.org/sf/0.1.6
145 info trying registry request attempt 1 at 22:27:04
146 verbose etag "D7RXZ3DA2XK3ZOOJ0CZK9E1YD"
147 http GET https://registry.npmjs.org/sf/0.1.6
148 verbose url raw optimist
149 verbose url resolving [ 'https://registry.npmjs.org/', './optimist' ]
150 verbose url resolved https://registry.npmjs.org/optimist
151 info trying registry request attempt 1 at 22:27:04
152 verbose etag "4XN3ILB8625D6CTXD6XTUK6F"
153 http GET https://registry.npmjs.org/optimist
154 http 304 https://registry.npmjs.org/async/0.1.18
155 silly registry.get cb [ 304,
155 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
155 silly registry.get     etag: '"6AN2S70MS70JAO3RJ0UBHU39X"',
155 silly registry.get     date: 'Sun, 19 May 2013 02:27:06 GMT',
155 silly registry.get     'content-length': '0' } ]
156 verbose etag async/0.1.18 from cache
157 verbose read json /Users/jamiegilmartin/.npm/async/0.1.18/package/package.json
158 http 304 https://registry.npmjs.org/optimist
159 silly registry.get cb [ 304,
159 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
159 silly registry.get     etag: '"4XN3ILB8625D6CTXD6XTUK6F"',
159 silly registry.get     date: 'Sun, 19 May 2013 02:27:06 GMT',
159 silly registry.get     'content-length': '0' } ]
160 verbose etag optimist from cache
161 http 304 https://registry.npmjs.org/bindings/1.1.0
162 silly registry.get cb [ 304,
162 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
162 silly registry.get     etag: '"CFVJVT1GCZS3UUVQEXZASBJH7"',
162 silly registry.get     date: 'Sun, 19 May 2013 02:27:06 GMT',
162 silly registry.get     'content-length': '0' } ]
163 verbose etag bindings/1.1.0 from cache
164 silly lockFile b86dcd49-async-0-1-18 async@0.1.18
165 http 304 https://registry.npmjs.org/sf/0.1.6
166 silly registry.get cb [ 304,
166 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
166 silly registry.get     etag: '"D7RXZ3DA2XK3ZOOJ0CZK9E1YD"',
166 silly registry.get     date: 'Sun, 19 May 2013 02:27:06 GMT',
166 silly registry.get     'content-length': '0' } ]
167 verbose etag sf/0.1.6 from cache
168 verbose read json /Users/jamiegilmartin/.npm/bindings/1.1.0/package/package.json
169 verbose read json /Users/jamiegilmartin/.npm/sf/0.1.6/package/package.json
170 silly lockFile ff2d1960-bindings-1-1-0 bindings@1.1.0
171 silly lockFile cae65a0c-sf-0-1-6 sf@0.1.6
172 silly addNameRange number 2 { name: 'optimist', range: '>=0.3.4- <0.4.0-', hasData: true }
173 silly addNameRange versions [ 'optimist',
173 silly addNameRange   [ '0.0.1',
173 silly addNameRange     '0.0.2',
173 silly addNameRange     '0.0.4',
173 silly addNameRange     '0.0.5',
173 silly addNameRange     '0.0.6',
173 silly addNameRange     '0.0.7',
173 silly addNameRange     '0.1.0',
173 silly addNameRange     '0.1.1',
173 silly addNameRange     '0.1.2',
173 silly addNameRange     '0.1.3',
173 silly addNameRange     '0.1.4',
173 silly addNameRange     '0.1.5',
173 silly addNameRange     '0.1.6',
173 silly addNameRange     '0.1.7',
173 silly addNameRange     '0.1.8',
173 silly addNameRange     '0.1.9',
173 silly addNameRange     '0.0.3',
173 silly addNameRange     '0.2.0',
173 silly addNameRange     '0.2.1',
173 silly addNameRange     '0.2.2',
173 silly addNameRange     '0.2.3',
173 silly addNameRange     '0.2.4',
173 silly addNameRange     '0.2.5',
173 silly addNameRange     '0.2.6',
173 silly addNameRange     '0.2.7',
173 silly addNameRange     '0.2.8',
173 silly addNameRange     '0.3.0',
173 silly addNameRange     '0.3.1',
173 silly addNameRange     '0.3.3',
173 silly addNameRange     '0.3.4',
173 silly addNameRange     '0.3.5',
173 silly addNameRange     '0.3.6',
173 silly addNameRange     '0.3.7',
173 silly addNameRange     '0.4.0',
173 silly addNameRange     '0.5.0' ] ]
174 verbose addNamed [ 'optimist', '0.3.7' ]
175 verbose addNamed [ '0.3.7', '0.3.7' ]
176 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
177 verbose lock optimist@0.3.7 /Users/jamiegilmartin/.npm/090e1d8d-optimist-0-3-7.lock
178 verbose read json /Users/jamiegilmartin/.npm/optimist/0.3.7/package/package.json
179 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
180 silly lockFile 094c60bd-optimist-0-3-4 optimist@~0.3.4
181 silly resolved [ { name: 'async',
181 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
181 silly resolved     main: './index',
181 silly resolved     author: { name: 'Caolan McMahon' },
181 silly resolved     version: '0.1.18',
181 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
181 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
181 silly resolved     licenses: [ [Object] ],
181 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
181 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal [\'two\',\'one\']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
181 silly resolved     _id: 'async@0.1.18',
181 silly resolved     _from: 'async@0.1.18' },
181 silly resolved   { name: 'bindings',
181 silly resolved     description: 'Helper module for loading your native module\'s .node file',
181 silly resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
181 silly resolved     version: '1.1.0',
181 silly resolved     author:
181 silly resolved      { name: 'Nathan Rajlich',
181 silly resolved        email: 'nathan@tootallnate.net',
181 silly resolved        url: 'http://tootallnate.net' },
181 silly resolved     repository:
181 silly resolved      { type: 'git',
181 silly resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
181 silly resolved     main: './bindings.js',
181 silly resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
181 silly resolved     _id: 'bindings@1.1.0',
181 silly resolved     _from: 'bindings@1.1.0' },
181 silly resolved   { name: 'sf',
181 silly resolved     description: 'String formatting library for node.js',
181 silly resolved     author: { name: 'Joe Ferner', email: 'joe.ferner@nearinfinity.com' },
181 silly resolved     keywords: [ 'string', 'format', 'template' ],
181 silly resolved     version: '0.1.6',
181 silly resolved     engines: { node: '>=0.6.0' },
181 silly resolved     maintainers: [ [Object] ],
181 silly resolved     bugs: { url: 'https://github.com/nearinfinity/node-sf/issues' },
181 silly resolved     license: 'MIT',
181 silly resolved     repository:
181 silly resolved      { type: 'git',
181 silly resolved        url: 'https://github.com/nearinfinity/node-sf.git' },
181 silly resolved     devDependencies: { nodeunit: '~0.7.3', 'timezone-js': '~0.4.3' },
181 silly resolved     scripts: { test: 'nodeunit test' },
181 silly resolved     main: './index.js',
181 silly resolved     readme: '# sf\n\n[![Build Status](https://secure.travis-ci.org/nearinfinity/node-sf.png)](http://travis-ci.org/nearinfinity/node-sf)\n\nString formatting library for node.js.\n\n## Installation\n\n```bash\n$ npm install sf\n```\n\n## Quick Examples\n\n```javascript\nvar sf = require("sf");\n\nsf("{who} has a {what}", { who: \'dog\', what: \'tail\' });\n// returns: dog has a tail\n\nsf("{0} has a {1}", \'dog\', \'tail\');\n// returns: dog has a tail\n\nsf("{0:#,##0.00}", 2123.1);\n// returns: 2,123.10\n\nsf("{0,15:#,##0.00}", 2123.1);\n// returns:        2,123.10\n\nsf("{a.b}", { a: { b: \'test\' }});\n// returns: test\n\nsf("{a.z.c}", { a: { b: \'test\' }});\n// throws an error\n\nsf("{a.?z.?c}", { a: { b: \'test\' }});\n// returns:\n\nsf("{a[0]}", { a: [ \'foo\', \'bar\' ]});\n// returns: foo\n\nsf("{a[-1]}", { a: [ \'foo\', \'bar\' ]});\n// returns: bar\n\nsf.log("{who} has a {what}", { who: \'dog\', what: \'tail\' });\n// outputs to standard out: dog has a tail\n\nsf("{0:^d \'Days,\' h:mm:ss.fff}", new sf.TimeSpan(8173818181));\n// returns: 94 Days, 14:30:18.181\n```\n\n## Format Specifiers\n\nThe format is similar to C#\'s string.format. The text inside the curly braces is {indexOrName[,alignment][:formatString]}.\nIf alignment is positive the text is right aligned. If alignment is negative it will be left aligned.\n\n### Object\n\n| Specifier | Name                         |\n|-----------|------------------------------|\n| json      | JSON.stringify               |\n| inspect   | util.inspect                 |\n\n### Numbers\n\n| Specifier | Name                         | Example          | Output         |\n|-----------|------------------------------|------------------|----------------|\n| 0         | Zero placeholder             | {0:00.0000}      | 02.1200        |\n| #         | Digit placeholder            | {0:#,###}        | 1,234          |\n| x         | Lowercase hex                | {0:x4}           | 01fc           |\n| X         | Uppercase hex                | {0:X4}           | 01FC           |\n\n### Dates\n\n| Specifier | Name                            | Example                         |\n|-----------|---------------------------------|---------------------------------|\n| sd        | Short date                      | 10/12/2002                      |\n| D         | Long date                       | December 10, 2002               |\n| t         | Short time                      | 10:11 PM                        |\n| T         | Long time                       | 10:11:29 PM                     |\n| fdt       | Full date & time                | December 10, 2002 10:11 PM      |\n| F         | Full date & time (long)         | December 10, 2002 10:11:29 PM   |\n| g         | Default date & time             | 10/12/2002 10:11 PM             |\n| G         | Default date & time (long)      | 10/12/2002 10:11:29 PM          |\n| md        | Month day pattern               | December 10                     |\n| r         | RFC1123 date string             | Tue, 10 Dec 2002 22:11:29 +0500 |\n| s         | Sortable date string            | 2002-12-10T22:11:29             |\n| d         | Date single digit               | 1                               |\n| dd        | Date leading zero               | 01                              |\n| ddd       | Short day name                  | Mon                             |\n| dddd      | Long day name                   | Monday                          |\n| f         | Fraction of second (1 digit)    | 1                               |\n| ff        | Fraction of second (2 digit)    | 24                              |\n| fff       | Fraction of second (3 digit)    | 345                             |\n| h         | Hour 12-hour format 1 digit     | 5                               |\n| hh        | Hour 12-hour format 2 digits    | 05                              |\n| H         | Hour 24-hour format 1 digit     | 5                               |\n| HH        | Hour 24-hour format 2 digits    | 05                              |\n| mm        | Minutes 2 digits                | 23                              |\n| M         | Month single digit              | 2                               |\n| MM        | Month leading zero              | 02                              |\n| MMM       | Month short name                | Feb                             |\n| MMMM      | Month long name                 | February                        |\n| ss        | Seconds 2 digits                | 54                              |\n| tt        | AM/PM                           | AM                              |\n| yy        | Year 2 digits                   | 12                              |\n| yyyy      | Year 4 digits                   | 2012                            |\n| zz        | Time zone offset                | 05                              |\n| +zz       | Time zone offset leading +      | +05                             |\n| zzz       | Time zone offset full           | 05:00                           |\n| zzzz      | Time zone offset full           | 0500                            |\n| +zzzz     | Time zone offset full leading + | +0500                           |\n\n### sf.TimeSpan\n\n| Specifier | Name                | Example                |\n|-----------|---------------------|------------------------|\n| y         | Years               | 2                      |\n| M         | Months              | 6                      |\n| d         | Days                | 8                      |\n| h         | Hours               | 10                     |\n| m         | Minutes             | 15                     |\n| s         | Seconds             | 5                      |\n| f         | Fraction of Seconds | 9                      |\n\nIf you prefix the specifier with \'^\' you will get the total number of that value. For\nexample \'^s\' will output the total number of seconds in the time span. Where as \'s\' will\nonly output the number of seconds in a minute.\n\nIf you repeat characters the value will be prefixed with zeros.\n\n## sf.indent(str, options)\n\nHelper function to word wrap and indent a string.\n\n__Arguments__\n\n * str - The string to indent and wrap.\n * options\n  * prefix - The prefix to appear at the beginning of each new line.\n  * wordwrap - The maximum length of each line.\n\n## Helper Functions\n\n * sf.log(formatString [, args...]);\n * sf.info(formatString [, args...]);\n * sf.warn(formatString [, args...]);\n * sf.error(formatString [, args...]);\n',
181 silly resolved     _id: 'sf@0.1.6',
181 silly resolved     _from: 'sf@0.1.6' },
181 silly resolved   { name: 'optimist',
181 silly resolved     version: '0.3.7',
181 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
181 silly resolved     main: './index.js',
181 silly resolved     dependencies: { wordwrap: '~0.0.2' },
181 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.4.0' },
181 silly resolved     scripts: { test: 'tap ./test/*.js' },
181 silly resolved     repository:
181 silly resolved      { type: 'git',
181 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
181 silly resolved     keywords:
181 silly resolved      [ 'argument',
181 silly resolved        'args',
181 silly resolved        'option',
181 silly resolved        'parser',
181 silly resolved        'parsing',
181 silly resolved        'cli',
181 silly resolved        'command' ],
181 silly resolved     author:
181 silly resolved      { name: 'James Halliday',
181 silly resolved        email: 'mail@substack.net',
181 silly resolved        url: 'http://substack.net' },
181 silly resolved     license: 'MIT/X11',
181 silly resolved     engine: { node: '>=0.4' },
181 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
181 silly resolved     _id: 'optimist@0.3.7',
181 silly resolved     _from: 'optimist@~0.3.4' } ]
182 info install async@0.1.18 into /Users/jamiegilmartin/node_modules/serialport
183 info install bindings@1.1.0 into /Users/jamiegilmartin/node_modules/serialport
184 info install sf@0.1.6 into /Users/jamiegilmartin/node_modules/serialport
185 info install optimist@0.3.7 into /Users/jamiegilmartin/node_modules/serialport
186 info installOne async@0.1.18
187 info installOne bindings@1.1.0
188 info installOne sf@0.1.6
189 info installOne optimist@0.3.7
190 verbose from cache /Users/jamiegilmartin/.npm/async/0.1.18/package/package.json
191 verbose from cache /Users/jamiegilmartin/.npm/bindings/1.1.0/package/package.json
192 verbose from cache /Users/jamiegilmartin/.npm/sf/0.1.6/package/package.json
193 verbose from cache /Users/jamiegilmartin/.npm/optimist/0.3.7/package/package.json
194 info /Users/jamiegilmartin/node_modules/serialport/node_modules/async unbuild
195 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/async/package.json
196 info /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings unbuild
197 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings/package.json
198 info /Users/jamiegilmartin/node_modules/serialport/node_modules/sf unbuild
199 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/sf/package.json
200 info /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist unbuild
201 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/package.json
202 verbose tar unpack /Users/jamiegilmartin/.npm/async/0.1.18/package.tgz
203 verbose tar unpack /Users/jamiegilmartin/.npm/bindings/1.1.0/package.tgz
204 verbose tar unpack /Users/jamiegilmartin/.npm/sf/0.1.6/package.tgz
205 verbose tar unpack /Users/jamiegilmartin/.npm/optimist/0.3.7/package.tgz
206 silly lockFile f20e3b59-es-serialport-node-modules-async /Users/jamiegilmartin/node_modules/serialport/node_modules/async
207 verbose lock /Users/jamiegilmartin/node_modules/serialport/node_modules/async /Users/jamiegilmartin/.npm/f20e3b59-es-serialport-node-modules-async.lock
208 silly lockFile a3ee37ac-serialport-node-modules-bindings /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings
209 verbose lock /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings /Users/jamiegilmartin/.npm/a3ee37ac-serialport-node-modules-bindings.lock
210 silly lockFile 74629a10-dules-serialport-node-modules-sf /Users/jamiegilmartin/node_modules/serialport/node_modules/sf
211 verbose lock /Users/jamiegilmartin/node_modules/serialport/node_modules/sf /Users/jamiegilmartin/.npm/74629a10-dules-serialport-node-modules-sf.lock
212 silly lockFile 3a89da46-serialport-node-modules-optimist /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist
213 verbose lock /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist /Users/jamiegilmartin/.npm/3a89da46-serialport-node-modules-optimist.lock
214 silly gunzTarPerm modes [ '755', '644' ]
215 silly gunzTarPerm modes [ '755', '644' ]
216 silly gunzTarPerm modes [ '755', '644' ]
217 silly gunzTarPerm modes [ '755', '644' ]
218 silly gunzTarPerm extractEntry package.json
219 silly gunzTarPerm extractEntry package.json
220 silly gunzTarPerm extractEntry package.json
221 silly gunzTarPerm extractEntry package.json
222 silly gunzTarPerm extractEntry .npmignore
223 silly gunzTarPerm extractEntry README.md
224 silly gunzTarPerm extractEntry README.md
225 silly gunzTarPerm extractEntry bindings.js
226 silly gunzTarPerm extractEntry .npmignore
227 silly gunzTarPerm extractEntry README.md
228 silly gunzTarPerm extractEntry LICENSE
229 silly gunzTarPerm extractEntry index.js
230 silly gunzTarPerm extractEntry LICENSE
231 silly gunzTarPerm extractEntry index.js
232 silly gunzTarPerm extractEntry index.js
233 silly gunzTarPerm extractEntry .travis.yml
234 silly gunzTarPerm extractEntry .travis.yml
235 silly gunzTarPerm extractEntry example/bool.js
236 silly gunzTarPerm extractEntry example/default_singles.js
237 silly gunzTarPerm extractEntry .gitmodules
238 silly gunzTarPerm extractEntry lib/async.js
239 silly gunzTarPerm extractEntry lib/stringFormat.js
240 silly gunzTarPerm extractEntry test/indentTest.js
241 silly gunzTarPerm extractEntry Makefile
242 silly gunzTarPerm extractEntry test/stringFormatTest.js
243 silly gunzTarPerm extractEntry example/divide.js
244 silly gunzTarPerm extractEntry example/line_count.js
245 silly gunzTarPerm extractEntry test/timeSpanTest.js
246 silly gunzTarPerm extractEntry example/default_hash.js
247 silly gunzTarPerm extractEntry example/line_count_wrap.js
248 silly gunzTarPerm extractEntry example/nonopt.js
249 silly gunzTarPerm extractEntry example/reflect.js
250 silly gunzTarPerm extractEntry example/short.js
251 silly gunzTarPerm extractEntry example/string.js
252 silly gunzTarPerm extractEntry example/boolean_single.js
253 silly gunzTarPerm extractEntry example/usage-options.js
254 silly gunzTarPerm extractEntry example/boolean_double.js
255 silly gunzTarPerm extractEntry example/xup.js
256 silly gunzTarPerm extractEntry example/line_count_options.js
257 silly gunzTarPerm extractEntry readme.markdown
258 silly gunzTarPerm extractEntry test/_.js
259 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings/package.json
260 silly gunzTarPerm extractEntry test/parse.js
261 silly gunzTarPerm extractEntry test/usage.js
262 silly gunzTarPerm extractEntry test/_/argv.js
263 silly gunzTarPerm extractEntry test/_/bin.js
264 silly lockFile a3ee37ac-serialport-node-modules-bindings /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings
265 info preinstall bindings@1.1.0
266 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings/package.json
267 verbose readDependencies using package.json deps
268 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings/package.json
269 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/sf/package.json
270 verbose readDependencies using package.json deps
271 silly resolved []
272 verbose about to build /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings
273 info build /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings
274 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/bindings/package.json
275 silly lockFile 74629a10-dules-serialport-node-modules-sf /Users/jamiegilmartin/node_modules/serialport/node_modules/sf
276 info preinstall sf@0.1.6
277 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/async/package.json
278 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/sf/package.json
279 verbose linkStuff [ false,
279 verbose linkStuff   false,
279 verbose linkStuff   false,
279 verbose linkStuff   '/Users/jamiegilmartin/node_modules/serialport/node_modules' ]
280 info linkStuff bindings@1.1.0
281 verbose linkBins bindings@1.1.0
282 verbose linkMans bindings@1.1.0
283 verbose rebuildBundles bindings@1.1.0
284 info install bindings@1.1.0
285 verbose readDependencies using package.json deps
286 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/sf/package.json
287 info postinstall bindings@1.1.0
288 silly lockFile f20e3b59-es-serialport-node-modules-async /Users/jamiegilmartin/node_modules/serialport/node_modules/async
289 info preinstall async@0.1.18
290 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/async/package.json
291 verbose readDependencies using package.json deps
292 silly resolved []
293 verbose about to build /Users/jamiegilmartin/node_modules/serialport/node_modules/sf
294 info build /Users/jamiegilmartin/node_modules/serialport/node_modules/sf
295 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/sf/package.json
296 verbose readDependencies using package.json deps
297 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/async/package.json
298 verbose linkStuff [ false,
298 verbose linkStuff   false,
298 verbose linkStuff   false,
298 verbose linkStuff   '/Users/jamiegilmartin/node_modules/serialport/node_modules' ]
299 info linkStuff sf@0.1.6
300 verbose linkBins sf@0.1.6
301 verbose linkMans sf@0.1.6
302 verbose rebuildBundles sf@0.1.6
303 info install sf@0.1.6
304 verbose readDependencies using package.json deps
305 silly resolved []
306 verbose about to build /Users/jamiegilmartin/node_modules/serialport/node_modules/async
307 info build /Users/jamiegilmartin/node_modules/serialport/node_modules/async
308 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/async/package.json
309 info postinstall sf@0.1.6
310 verbose linkStuff [ false,
310 verbose linkStuff   false,
310 verbose linkStuff   false,
310 verbose linkStuff   '/Users/jamiegilmartin/node_modules/serialport/node_modules' ]
311 info linkStuff async@0.1.18
312 verbose linkBins async@0.1.18
313 verbose linkMans async@0.1.18
314 verbose rebuildBundles async@0.1.18
315 info install async@0.1.18
316 info postinstall async@0.1.18
317 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/package.json
318 silly lockFile 3a89da46-serialport-node-modules-optimist /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist
319 info preinstall optimist@0.3.7
320 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/package.json
321 verbose readDependencies using package.json deps
322 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/package.json
323 verbose readDependencies using package.json deps
324 verbose cache add [ 'wordwrap@~0.0.2', null ]
325 silly cache add name=undefined spec="wordwrap@~0.0.2" args=["wordwrap@~0.0.2",null]
326 verbose parsed url { pathname: 'wordwrap@~0.0.2',
326 verbose parsed url   path: 'wordwrap@~0.0.2',
326 verbose parsed url   href: 'wordwrap@~0.0.2' }
327 silly cache add name="wordwrap" spec="~0.0.2" args=["wordwrap","~0.0.2"]
328 verbose parsed url { pathname: '~0.0.2', path: '~0.0.2', href: '~0.0.2' }
329 verbose addNamed [ 'wordwrap', '~0.0.2' ]
330 verbose addNamed [ null, '>=0.0.2- <0.1.0-' ]
331 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
332 verbose lock wordwrap@~0.0.2 /Users/jamiegilmartin/.npm/8bd42136-wordwrap-0-0-2.lock
333 silly addNameRange { name: 'wordwrap', range: '>=0.0.2- <0.1.0-', hasData: false }
334 verbose url raw wordwrap
335 verbose url resolving [ 'https://registry.npmjs.org/', './wordwrap' ]
336 verbose url resolved https://registry.npmjs.org/wordwrap
337 info trying registry request attempt 1 at 22:27:05
338 verbose etag "8NKTI0FN3VU7WLBYSVKWDBRGF"
339 http GET https://registry.npmjs.org/wordwrap
340 http 304 https://registry.npmjs.org/wordwrap
341 silly registry.get cb [ 304,
341 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
341 silly registry.get     etag: '"8NKTI0FN3VU7WLBYSVKWDBRGF"',
341 silly registry.get     date: 'Sun, 19 May 2013 02:27:07 GMT',
341 silly registry.get     'content-length': '0' } ]
342 verbose etag wordwrap from cache
343 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.2- <0.1.0-', hasData: true }
344 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
345 verbose addNamed [ 'wordwrap', '0.0.2' ]
346 verbose addNamed [ '0.0.2', '0.0.2' ]
347 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
348 verbose lock wordwrap@0.0.2 /Users/jamiegilmartin/.npm/24a694c8-wordwrap-0-0-2.lock
349 verbose read json /Users/jamiegilmartin/.npm/wordwrap/0.0.2/package/package.json
350 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
351 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
352 silly resolved [ { name: 'wordwrap',
352 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
352 silly resolved     version: '0.0.2',
352 silly resolved     repository:
352 silly resolved      { type: 'git',
352 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
352 silly resolved     main: './index.js',
352 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
352 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
352 silly resolved     scripts: { test: 'expresso' },
352 silly resolved     devDependencies: { expresso: '=0.7.x' },
352 silly resolved     engines: { node: '>=0.4.0' },
352 silly resolved     license: 'MIT/X11',
352 silly resolved     author:
352 silly resolved      { name: 'James Halliday',
352 silly resolved        email: 'mail@substack.net',
352 silly resolved        url: 'http://substack.net' },
352 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
352 silly resolved     _id: 'wordwrap@0.0.2',
352 silly resolved     _from: 'wordwrap@~0.0.2' } ]
353 info install wordwrap@0.0.2 into /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist
354 info installOne wordwrap@0.0.2
355 verbose from cache /Users/jamiegilmartin/.npm/wordwrap/0.0.2/package/package.json
356 info /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap unbuild
357 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
358 verbose tar unpack /Users/jamiegilmartin/.npm/wordwrap/0.0.2/package.tgz
359 silly lockFile bb818ce4-s-optimist-node-modules-wordwrap /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
360 verbose lock /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap /Users/jamiegilmartin/.npm/bb818ce4-s-optimist-node-modules-wordwrap.lock
361 silly gunzTarPerm modes [ '755', '644' ]
362 silly gunzTarPerm extractEntry package.json
363 silly gunzTarPerm extractEntry .npmignore
364 silly gunzTarPerm extractEntry index.js
365 silly gunzTarPerm extractEntry example/center.js
366 silly gunzTarPerm extractEntry example/meat.js
367 silly gunzTarPerm extractEntry README.markdown
368 silly gunzTarPerm extractEntry test/break.js
369 silly gunzTarPerm extractEntry test/wrap.js
370 silly gunzTarPerm extractEntry test/idleness.txt
371 verbose read json /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
372 silly lockFile bb818ce4-s-optimist-node-modules-wordwrap /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
373 info preinstall wordwrap@0.0.2
374 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
375 verbose readDependencies using package.json deps
376 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
377 verbose readDependencies using package.json deps
378 silly resolved []
379 verbose about to build /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
380 info build /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap
381 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules/wordwrap/package.json
382 verbose linkStuff [ false,
382 verbose linkStuff   false,
382 verbose linkStuff   false,
382 verbose linkStuff   '/Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/node_modules' ]
383 info linkStuff wordwrap@0.0.2
384 verbose linkBins wordwrap@0.0.2
385 verbose linkMans wordwrap@0.0.2
386 verbose rebuildBundles wordwrap@0.0.2
387 info install wordwrap@0.0.2
388 info postinstall wordwrap@0.0.2
389 verbose about to build /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist
390 info build /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist
391 verbose from cache /Users/jamiegilmartin/node_modules/serialport/node_modules/optimist/package.json
392 verbose linkStuff [ false,
392 verbose linkStuff   false,
392 verbose linkStuff   false,
392 verbose linkStuff   '/Users/jamiegilmartin/node_modules/serialport/node_modules' ]
393 info linkStuff optimist@0.3.7
394 verbose linkBins optimist@0.3.7
395 verbose linkMans optimist@0.3.7
396 verbose rebuildBundles optimist@0.3.7
397 verbose rebuildBundles [ 'wordwrap' ]
398 info install optimist@0.3.7
399 info postinstall optimist@0.3.7
400 verbose about to build /Users/jamiegilmartin/node_modules/serialport
401 info build /Users/jamiegilmartin/node_modules/serialport
402 verbose from cache /Users/jamiegilmartin/node_modules/serialport/package.json
403 verbose linkStuff [ false, false, false, '/Users/jamiegilmartin/node_modules' ]
404 info linkStuff serialport@1.1.0
405 verbose linkBins serialport@1.1.0
406 verbose link bins [ { serialportlist: './bin/serialportList.js',
406 verbose link bins     serialportterm: './bin/serialportTerminal.js' },
406 verbose link bins   '/Users/jamiegilmartin/node_modules/.bin',
406 verbose link bins   false ]
407 verbose linkMans serialport@1.1.0
408 verbose rebuildBundles serialport@1.1.0
409 verbose rebuildBundles [ 'async', 'bindings', 'optimist', 'sf' ]
410 info install serialport@1.1.0
411 verbose unsafe-perm in lifecycle false
412 verbose set uid from=0 to=501
413 silly exec sh "-c" "node-gyp rebuild"
414 silly sh,-c,node-gyp rebuild,/Users/jamiegilmartin/node_modules/serialport spawning
415 info serialport@1.1.0 Failed to exec install script
416 info /Users/jamiegilmartin/node_modules/serialport unbuild
417 verbose from cache /Users/jamiegilmartin/node_modules/serialport/package.json
418 info preuninstall serialport@1.1.0
419 info uninstall serialport@1.1.0
420 verbose true,/Users/jamiegilmartin/node_modules,/Users/jamiegilmartin/node_modules unbuild serialport@1.1.0
421 verbose /Users/jamiegilmartin/node_modules/.bin,[object Object] binRoot
422 info postuninstall serialport@1.1.0
423 error serialport@1.1.0 install: `node-gyp rebuild`
423 error `sh "-c" "node-gyp rebuild"` failed with 1
424 error Failed at the serialport@1.1.0 install script.
424 error This is most likely a problem with the serialport package,
424 error not with npm itself.
424 error Tell the author that this fails on your system:
424 error     node-gyp rebuild
424 error You can get their info via:
424 error     npm owner ls serialport
424 error There is likely additional logging output above.
425 error System Darwin 12.3.0
426 error command "node" "/usr/local/bin/npm" "install" "serialport"
427 error cwd /Users/jamiegilmartin/Documents/Arduino/StarRobot/web
428 error node -v v0.8.9
429 error npm -v 1.1.61
430 error code ELIFECYCLE
431 verbose exit [ 1, true ]
